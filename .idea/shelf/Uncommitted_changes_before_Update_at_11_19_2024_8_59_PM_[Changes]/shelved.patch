Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nfrom Base.Ear import *\r\nfrom Generator.big_data import *\r\nfrom Function.wish import *\r\nfrom Model.model2 import *\r\nfrom Model.model1 import *\r\nfrom Function.temperature import *\r\nfrom Function.joke import *\r\nfrom Function.find_ip import *\r\nfrom Function.check_net_speed import *\r\nfrom Automation.scrole_automation import *\r\nfrom Function.time import *\r\nfrom Automation.openapp import *\r\nfrom Automation.Draw import *\r\nfrom Automation.mouse import *\r\nfrom Automation.tab_auto import *\r\nfrom Automation.openwebsite import *\r\nfrom Generator.codegenerator import *\r\nfrom Automation.windows import *\r\nfrom Base.Mouth import *\r\nfrom Data.DLG import *\r\nimport random\r\ndef speak_async(text):\r\n    \"\"\"Runs the speak function in a separate thread.\"\"\"\r\n    threading.Thread(target=speak, args=(text,)).start()\r\n\r\ndef jarvis():\r\n    # Initial greeting\r\n    text = \" \".join([word for word in listen().lower().split() if word != 'jarvis'])\r\n\r\n    if any(keyword in text for keyword in wake_key_word):\r\n        wish()\r\n\r\n    # Main loop\r\n    while True:\r\n        time.sleep(3)\r\n        text = listen().lower()\r\n        Greating(text)\r\n\r\n        # Chat commands\r\n        if \"chat with me\" in text or \"chat\" in text:\r\n            if 'my' in text:\r\n                speak_async(\"I am model one chatbot.\")\r\n                while True:\r\n                    user = listen().lower()\r\n                    if any(keyword in user for keyword in bye_key_word):\r\n                        speak_async(random.choice(res_bye))\r\n                        break\r\n                    response = mind(user)\r\n                    speak_async(response)\r\n            else:\r\n                speak_async(\"I am model two chatbot.\")\r\n                while True:\r\n                    user = listen().lower()\r\n                    if any(keyword in user for keyword in bye_key_word):\r\n                        speak_async(random.choice(res_bye))\r\n                        break\r\n                    response = get_response(user)\r\n                    speak_async(response)\r\n\r\n        # Temperature\r\n        elif \"temperature\" in text:\r\n            speak_async(\"Checking the temperature\")\r\n            Temp()\r\n\r\n        # Jokes\r\n        elif \"tell me joke\" in text or \"joke\" in text:\r\n            joke()\r\n\r\n        # Time\r\n        elif \"time\" in text or \"what is time\" in text:\r\n            what_is_the_time()\r\n\r\n        # Internet speed\r\n        elif \"internet speed\" in text:\r\n            speak_async(\"Checking your internet speed\")\r\n            get_internet_speed()\r\n\r\n        # IP Address\r\n        elif \"ip address\" in text:\r\n            speak_async(\"Finding your IP address\")\r\n            find_my_ip()\r\n\r\n        # Scrolling\r\n        elif \"scroll up\" in text:\r\n            speak_async(\"Scrolling up\")\r\n            scroll_up()\r\n        elif \"scroll down\" in text:\r\n            speak_async(\"Scrolling down\")\r\n            scroll_down()\r\n        elif \"scroll to top\" in text:\r\n            speak_async(\"Scrolling to the top\")\r\n            scroll_to_top()\r\n        elif \"scroll to bottom\" in text:\r\n            speak_async(\"Scrolling to the bottom\")\r\n            scroll_to_bottom()\r\n\r\n        # Opening apps and websites\r\n        elif \"open\" in text:\r\n            if \"website\" in text or \"site\" in text:\r\n                site = text.replace(\"open\", \"\").replace(\"website\", \"\").replace(\"site\", \"\").strip()\r\n                speak_async(f\"Opening the website {site}\")\r\n                openweb(site)\r\n            elif \"code\" in text:\r\n                speak_async(\"Generating code\")\r\n                code()\r\n            else:\r\n                app = text.replace(\"open\", \"\").strip()\r\n                speak_async(f\"Opening {app}\")\r\n                open(app)\r\n\r\n        # Drawing commands\r\n        elif \"draw\" in text:\r\n            if \"circle\" in text:\r\n                speak_async(\"Drawing a circle\")\r\n                draw_circle()\r\n            elif \"rectangle spiral\" in text:\r\n                speak_async(\"Drawing a rectangle spiral\")\r\n                rectangle_spiral()\r\n            elif \"logarithmic spiral\" in text:\r\n                speak_async(\"Drawing a logarithmic spiral\")\r\n                draw_logarithmic_spiral()\r\n            elif \"wave\" in text:\r\n                speak_async(\"Drawing a wave\")\r\n                draw_wave()\r\n            elif \"star\" in text:\r\n                speak_async(\"Drawing a star\")\r\n                draw_star()\r\n            elif \"zigzag\" in text:\r\n                speak_async(\"Drawing a zigzag\")\r\n                draw_zigzag()\r\n\r\n        # Google Search\r\n        elif text.endswith(\"search in google\") or text.startswith(\"search in google\") or text.endswith(\"search on google\") or text.startswith(\"search on google\"):\r\n            query = text.replace(\"search in google\", \"\").replace(\"search on google\", \"\").strip()\r\n            speak_async(f\"Searching {query} on Google\")\r\n            search_google(query)\r\n\r\n        # Browser Control\r\n        elif \"close tab\" in text:\r\n            speak_async(\"Closing the current tab\")\r\n            close_tab()\r\n        elif \"open browser menu\" in text:\r\n            open_browser_menu()\r\n        elif \"zoom in\" in text:\r\n            zoom_in()\r\n        elif \"zoom out\" in text:\r\n            zoom_out()\r\n        elif \"refresh page\" in text:\r\n            refresh_page()\r\n        elif \"switch to next tab\" in text:\r\n            switch_to_next_tab()\r\n        elif \"switch to previous tab\" in text:\r\n            switch_to_previous_tab()\r\n        elif \"open history\" in text:\r\n            open_history()\r\n        elif \"open bookmarks\" in text:\r\n            open_bookmarks()\r\n        elif \"go back\" in text:\r\n            go_back()\r\n        elif \"go forward\" in text:\r\n            go_forward()\r\n        elif \"dev tools\" in text:\r\n            open_dev_tools()\r\n        elif \"toggle full screen\" in text:\r\n            toggle_full_screen()\r\n        elif \"private window\" in text:\r\n            open_private_window()\r\n        elif \"new tab\" in text:\r\n            open_new_tab()\r\n\r\n        # Typing and Code Generation\r\n        elif \"type\" in text or 'write' in text:\r\n            if 'my' in text:\r\n                while True:\r\n                    content = listen().lower()\r\n                    if \"exit\" in content or \"stop\" in content:\r\n                        break\r\n                    pyautogui.write(content)\r\n            else:\r\n                speak_async(\"What should I write?\")\r\n                query = listen()\r\n                content = deep_search(query)\r\n                pyautogui.write(content)\r\n                time.sleep(5)\r\n                speak_async(content)\r\n\r\n            # Window Management\r\n        elif \"minimize window\" in text or \"minimise window\" in text:\r\n            speak_async(\"Minimizing the window\")\r\n            minimize_window()\r\n\r\n        elif \"maximize window\" in text or \"maximise window\" in text:\r\n            speak_async(\"Maximizing the window\")\r\n            maximize_window()\r\n\r\n        elif \"close window\" in text:\r\n            speak_async(\"Closing the window\")\r\n            close_window()\r\n\r\n        elif \"refresh window\" in text:\r\n            speak_async(\"Refreshing the window\")\r\n            refresh_window()\r\n\r\n        # Clipboard and Text Selection\r\n        elif \"copy\" in text:\r\n            speak_async(\"Copying the selected text\")\r\n            copy_text()\r\n\r\n        elif \"paste\" in text:\r\n            speak_async(\"Pasting the text\")\r\n            paste_text()\r\n\r\n        elif \"cut\" in text:\r\n            speak_async(\"Cutting the selected text\")\r\n            cut_text()\r\n\r\n        elif \"select all\" in text:\r\n            speak_async(\"Selecting all text\")\r\n            select_all()\r\n\r\n        elif \"hold shift\" in text:\r\n            speak_async(\"Holding shift for selection\")\r\n            hold_shift_select()\r\n\r\n        # System Shortcuts\r\n        elif \"start menu\" in text:\r\n            speak_async(\"Opening the Start menu\")\r\n            open_start_menu()\r\n\r\n        elif \"minimize all\" in text or  \"minimise all\" in text:\r\n            speak_async(\"Minimizing all windows\")\r\n            minimize_all_windows()\r\n\r\n        elif \"lock computer\" in text:\r\n            lock_computer()\r\n            speak_async(\"Locking the computer\")\r\n\r\n\r\n        elif \"file explorer\" in text or \"open file\" in text:\r\n            open_file_explorer()\r\n            speak_async(\"Opening File Explorer\")\r\n\r\n\r\n        elif \"task manager\" in text:\r\n            speak_async(\"Opening Task Manager\")\r\n            open_task_manager()\r\n\r\n        elif \"run dialog\" in text:\r\n            speak_async(\"Opening the Run dialog\")\r\n            open_run_dialog()\r\n\r\n        elif \"screenshot\" in text:\r\n            speak_async(\"Taking a screenshot\")\r\n            take_screenshot()\r\n        # Mouse Control\r\n        elif \"move mouse\" in text or \"click\" in text or \"double click\" in text or \"scroll\" in text or \"drag\" in text:\r\n            handle_command(text)\r\n\r\n        # Exit commands\r\n        elif any(keyword in text for keyword in bye_key_word):\r\n            speak_async(random.choice(res_bye))\r\n            break\r\n\r\n\r\njarvis()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision aebef6d28d052597f42625dbca45871a05d4dd3b)
+++ b/main.py	(date 1732029212263)
@@ -1,5 +1,3 @@
-import time
-
 from Base.Ear import *
 from Generator.big_data import *
 from Function.wish import *
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"33827179-cb05-4e6d-8a41-051b96fd9349\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Automation/Draw.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Automation/Draw.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Automation/openwebsite.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Automation/openwebsite.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Base/Mouth.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Base/Mouth.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nPXZ8gqibiFo4uZvyzBRTaYnx3\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\r\n    &quot;Python.Draw.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.Ear.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.Mouth.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.app.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.big_data.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.check_net_speed.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.codegenerator.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.joke.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.model1.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.model2.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.model_train.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.mouse.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.openapp.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.small_data.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.tab_auto.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.temperature.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.time.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Myjarvis\\pythonProject1\\templates\" />\r\n      <recent name=\"D:\\Myjarvis\\pythonProject1\\Automation\" />\r\n      <recent name=\"D:\\Myjarvis\\pythonProject1\\Data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-0e3be3396995-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"33827179-cb05-4e6d-8a41-051b96fd9349\" name=\"Changes\" comment=\"\" />\r\n      <created>1728875737493</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728875737493</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Generator/codegenerator.py</url>\r\n          <line>60</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Function/joke.py</url>\r\n          <line>8</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision aebef6d28d052597f42625dbca45871a05d4dd3b)
+++ b/.idea/workspace.xml	(date 1732029444860)
@@ -6,9 +6,6 @@
   <component name="ChangeListManager">
     <list default="true" id="33827179-cb05-4e6d-8a41-051b96fd9349" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Automation/Draw.py" beforeDir="false" afterPath="$PROJECT_DIR$/Automation/Draw.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Automation/openwebsite.py" beforeDir="false" afterPath="$PROJECT_DIR$/Automation/openwebsite.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Base/Mouth.py" beforeDir="false" afterPath="$PROJECT_DIR$/Base/Mouth.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -88,6 +85,29 @@
       <updated>1728875737493</updated>
     </task>
     <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="origin/main" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
